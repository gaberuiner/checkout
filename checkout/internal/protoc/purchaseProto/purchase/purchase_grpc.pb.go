// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: purchase.proto

package purchase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Purchase_Create_FullMethodName = "/Purchase/Create"
)

// PurchaseClient is the client API for Purchase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchaseClient interface {
	Create(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type purchaseClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseClient(cc grpc.ClientConnInterface) PurchaseClient {
	return &purchaseClient{cc}
}

func (c *purchaseClient) Create(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Purchase_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseServer is the server API for Purchase service.
// All implementations must embed UnimplementedPurchaseServer
// for forward compatibility
type PurchaseServer interface {
	Create(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedPurchaseServer()
}

// UnimplementedPurchaseServer must be embedded to have forward compatible implementations.
type UnimplementedPurchaseServer struct {
}

func (UnimplementedPurchaseServer) Create(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPurchaseServer) mustEmbedUnimplementedPurchaseServer() {}

// UnsafePurchaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseServer will
// result in compilation errors.
type UnsafePurchaseServer interface {
	mustEmbedUnimplementedPurchaseServer()
}

func RegisterPurchaseServer(s grpc.ServiceRegistrar, srv PurchaseServer) {
	s.RegisterService(&Purchase_ServiceDesc, srv)
}

func _Purchase_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchase_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).Create(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Purchase_ServiceDesc is the grpc.ServiceDesc for Purchase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Purchase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Purchase",
	HandlerType: (*PurchaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Purchase_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "purchase.proto",
}
